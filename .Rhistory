FinalDrive_LE <- FinalDrive_LE %>% mutate(TagComp = "FinalDrive_LE") %>% rename(replace = c("Tag" = "Parametro"))
SwingDrive_LD <- SwingDrive_LD %>% mutate(TagComp = "SwingDrive_LD") %>% rename(replace = c("Tag" = "Parametro"))
SwingDrive_LE <- SwingDrive_LE %>% mutate(TagComp = "SwingDrive_LE") %>% rename(replace = c("Tag" = "Parametro"))
PumpDrive_1 <- PumpDrive_1 %>% mutate(TagComp = "PumpDrive_1") %>% rename(replace = c("Tag" = "Parametro"))
PumpDrive_2 <- PumpDrive_2 %>% mutate(TagComp = "PumpDrive_2") %>% rename(replace = c("Tag" = "Parametro"))
ShellCylinder_LD <- ShellCylinder_LD %>% mutate(TagComp = "ShellCylinder_LD") %>% rename(replace = c("Tag" = "Parametro"))
ShellCylinder_LE <- ShellCylinder_LE %>% mutate(TagComp = "ShellCylinder_LE") %>% rename(replace = c("Tag" = "Parametro"))
StickCylinder_LD <- StickCylinder_LD %>% mutate(TagComp = "StickCylinder_LD") %>% rename(replace = c("Tag" = "Parametro"))
StickCylinder_LE <- StickCylinder_LE %>% mutate(TagComp = "StickCylinder_LE") %>% rename(replace = c("Tag" = "Parametro"))
SwingGear_1 <- SwingGear_1 %>% mutate(TagComp = "SwingGear_1") %>% rename(replace = c("Tag" = "Parametro"))
SwingGear_2 <- SwingGear_2 %>% mutate(TagComp = "SwingGear_2") %>% rename(replace = c("Tag" = "Parametro"))
BDadosRNN <- bind_rows(BoomCylinder_LD,BoomCylinder_LE,BucketCylinder_LD,BucketCylinder_LE,FinalDrive_LD,FinalDrive_LE,PumpDrive_1,PumpDrive_2,ShellCylinder_LD,ShellCylinder_LE,StickCylinder_LD,StickCylinder_LE,SwingDrive_LD,SwingDrive_LE,SwingGear_1,SwingGear_2)
BDadosRNN <- BDadosRNN %>%  mutate(Timestamp = dmy_hms(Timestamp), Data = as.Date(Timestamp), Hora = format(Timestamp, "%H:%M:%S"))
BDadosRNN <- BDadosRNN %>% select(-Timestamp)
rm(BoomCylinder_LD,BoomCylinder_LE,BucketCylinder_LD,BucketCylinder_LE,FinalDrive_LD,FinalDrive_LE,PumpDrive_1,PumpDrive_2,ShellCylinder_LD,ShellCylinder_LE,StickCylinder_LD,StickCylinder_LE,SwingDrive_LD,SwingDrive_LE,SwingGear_1,SwingGear_2)
set.seed(1)
DfRnn <- BDadosRNN[, c(5,2)] %>% filter(BDadosRNN$Parametro == "Temperature" & BDadosRNN$TagComp == "BoomCylinder_LD")
DfRnn$Hora <- hms::as_hms(DfRnn$Hora)
ggplot(DfRnn, aes(x = Hora, y = Value)) +
geom_line() +
labs(title = "Gráfico de Dispersão com Horas",
x = "Hora",
y = "Valor") +
theme_minimal()
#preparação dos dados
periodos_anteriores <- 3# Cada valor da serie temporal e uma função dos periodos anteriores.
n_col = ncol(DfRnn)
for (i in 1:periodos_anteriores) {
for (j in 1:nrow(DfRnn))
if (j - periodos_anteriores <= 0){
} else {
DfRnn [j, n_col + i] = DfRnn [j -i, 2]
}
}
DfRnn <- DfRnn[, 2:5]
DfRnn <- DfRnn[4:8003,]
names(DfRnn) <- c("y", "x_1", "x_2", "x_3")
set.seed(1)
#Normalizando o Df
normalize <- function(x)
{
return((x - min(x))/ (max(x) - min(x)))
}
#MinMax Normalization
min <- min(DfRnn$y)
max <- max(DfRnn$y)
min <- min(DfRnn$x_1)
max <- max(DfRnn$x_1)
min <- min(DfRnn$x_2)
max <- max(DfRnn$x_2)
min <- min(DfRnn$x_3)
max <- max(DfRnn$x_3)
DFRnnNorm <-data.frame("Y" = (normalize(DfRnn$y)),"X_1" = (normalize(DfRnn$x_1)),"X_2"=(normalize(DfRnn$x_2)),"X_3"=(normalize(DfRnn$x_3)))
#DataFrame de Treino e teste
Y_array <- array(DFRnnNorm$Y, dim = c(nrow(DFRnnNorm) - 500, 1))
X_array <- array(c(DFRnnNorm$X_1[1:(nrow(DFRnnNorm)-500)],
DFRnnNorm$X_2[1:(nrow(DFRnnNorm)-500)],
DFRnnNorm$X_3[1:(nrow(DFRnnNorm)-500)]),
dim = c(nrow(DFRnnNorm) - 500, 1, 3))
train_x <- pad_sequences(X_array, maxlen = 90)
library(tensorflow)
train_x <- pad_sequences(X_array, maxlen = 90)
install.packages("remotes")
remotes::install_github("rstudio/tensorflow")
train_x <- pad_sequences(X_array, maxlen = 90)
set.seed(1)
pacotes <- c("rattle","rnn","ggplot2","dplyr","tidyverse", "readxl", "knitr", "lubridate", "tidyr","reshape", "scales", "caret", "Rtools","tinytex","tensorflow","keras")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
set.seed(1)
pacotes <- c("rattle","rnn","ggplot2","dplyr","tidyverse", "readxl", "knitr", "lubridate", "tidyr","reshape", "scales", "caret", "rtools","tinytex","tensorflow","keras")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
set.seed(1)
pacotes <- c("rattle","rnn","ggplot2","dplyr","tidyverse", "readxl", "knitr", "lubridate", "tidyr","reshape", "scales", "caret", "Rtools","tinytex","tensorflow","keras")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
set.seed(1)
pacotes <- c("rattle","rnn","ggplot2","dplyr","tidyverse", "readxl", "knitr", "lubridate", "tidyr","reshape", "scales", "caret", "tools","tinytex","tensorflow","keras")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
install.packages("tensorflow")
library(tensorflow)
install_tensorflow()
install.packages("tensorflow")
install.packages("tensorflow")
library(tensorflow)
install_tensorflow()
install.packages("tensorflow")
install.packages("tensorflow")
library(tensorflow)
install.packages("remotes")
remotes::install_github("rstudio/tensorflow")
install.packages("remotes")
remotes::install_github("rstudio/tensorflow")
tf$constant("Hello TensorFlow")
library(tensorflow)
tf$constant("Hello TensorFlow")
Sys.setenv(RETICULATE_PYTHON = "/path/to/your/virtualenv/bin/python")
library(tensorflow)
Sys.setenv(RETICULATE_PYTHON = "/path/to/your/virtualenv/bin/python")
train_x <- pad_sequences(X_array, maxlen = 90)
model <- keras_model_sequential()
update.packages(ask = FALSE, checkBuilt = TRUE)
train_x <- pad_sequences(X_array, maxlen = 90)
set.seed(42)
dados <- X_array
target <- Y_array
# Converta os dados para o formato apropriado
dados <- array(dados, dim = c(length(dados), 1, 1))
target <- array(target, dim = c(length(target), 1))
# Crie um modelo LSTM simples
modelo <- keras_model_sequential() %>%
layer_lstm(units = 50, input_shape = c(1, 1)) %>%
layer_dense(units = 1)
modelo <- keras_model_sequential() %>% layer_lstm(units = 50, input_shape = c(1, 1)) %>% layer_dense(units = 1)
# Crie um modelo LSTM simples
modelo <- keras_model_sequential()
set.seed(1)
pacotes <- c("rattle","rnn","ggplot2","dplyr","tidyverse", "readxl", "knitr", "lubridate", "tidyr","reshape", "scales", "caret", "tools","tinytex","tensorflow","keras")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
set.seed(1)
update.packages(ask = FALSE, checkBuilt = TRUE)
pacotes <- c("rattle","rnn","ggplot2","dplyr","tidyverse", "readxl", "knitr", "lubridate", "tidyr","reshape", "scales", "caret", "tools","tinytex","tensorflow")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
set.seed(1)
list.files()
arquivos <- list.files()
arquivos <- arquivos[grep(".xls", arquivos)]
for (j in arquivos){
assign(strsplit(j, split="\\.")[[1]][1], read_excel(j))
}
BoomCylinder_LD <- BoomCylinder_LD %>% mutate(TagComp = "BoomCylinder_LD") %>% rename(replace = c("Tag" = "Parametro"))
BoomCylinder_LE <- BoomCylinder_LE %>% mutate(TagComp = "BoomCylinder_LE") %>% rename(replace = c("Tag" = "Parametro"))
BucketCylinder_LE <- BucketCylinder_LE %>% mutate(TagComp = "BucketCylinder_LE") %>% rename(replace = c("Tag" = "Parametro"))
BucketCylinder_LD <- BucketCylinder_LD %>% mutate(TagComp = "BucketCylinder_LD") %>% rename(replace = c("Tag" = "Parametro"))
BucketCylinder_LE <- BucketCylinder_LE %>% mutate(TagComp = "BucketCylinder_LE") %>% rename(replace = c("Tag" = "Parametro"))
FinalDrive_LD <- FinalDrive_LD %>% mutate(TagComp = "FinalDrive_LD") %>% rename(replace = c("Tag" = "Parametro"))
FinalDrive_LE <- FinalDrive_LE %>% mutate(TagComp = "FinalDrive_LE") %>% rename(replace = c("Tag" = "Parametro"))
SwingDrive_LD <- SwingDrive_LD %>% mutate(TagComp = "SwingDrive_LD") %>% rename(replace = c("Tag" = "Parametro"))
SwingDrive_LE <- SwingDrive_LE %>% mutate(TagComp = "SwingDrive_LE") %>% rename(replace = c("Tag" = "Parametro"))
PumpDrive_1 <- PumpDrive_1 %>% mutate(TagComp = "PumpDrive_1") %>% rename(replace = c("Tag" = "Parametro"))
PumpDrive_2 <- PumpDrive_2 %>% mutate(TagComp = "PumpDrive_2") %>% rename(replace = c("Tag" = "Parametro"))
ShellCylinder_LD <- ShellCylinder_LD %>% mutate(TagComp = "ShellCylinder_LD") %>% rename(replace = c("Tag" = "Parametro"))
ShellCylinder_LE <- ShellCylinder_LE %>% mutate(TagComp = "ShellCylinder_LE") %>% rename(replace = c("Tag" = "Parametro"))
StickCylinder_LD <- StickCylinder_LD %>% mutate(TagComp = "StickCylinder_LD") %>% rename(replace = c("Tag" = "Parametro"))
StickCylinder_LE <- StickCylinder_LE %>% mutate(TagComp = "StickCylinder_LE") %>% rename(replace = c("Tag" = "Parametro"))
SwingGear_1 <- SwingGear_1 %>% mutate(TagComp = "SwingGear_1") %>% rename(replace = c("Tag" = "Parametro"))
SwingGear_2 <- SwingGear_2 %>% mutate(TagComp = "SwingGear_2") %>% rename(replace = c("Tag" = "Parametro"))
BDadosRNN <- bind_rows(BoomCylinder_LD,BoomCylinder_LE,BucketCylinder_LD,BucketCylinder_LE,FinalDrive_LD,FinalDrive_LE,PumpDrive_1,PumpDrive_2,ShellCylinder_LD,ShellCylinder_LE,StickCylinder_LD,StickCylinder_LE,SwingDrive_LD,SwingDrive_LE,SwingGear_1,SwingGear_2)
BDadosRNN <- BDadosRNN %>%  mutate(Timestamp = dmy_hms(Timestamp), Data = as.Date(Timestamp), Hora = format(Timestamp, "%H:%M:%S"))
BDadosRNN <- BDadosRNN %>% select(-Timestamp)
rm(BoomCylinder_LD,BoomCylinder_LE,BucketCylinder_LD,BucketCylinder_LE,FinalDrive_LD,FinalDrive_LE,PumpDrive_1,PumpDrive_2,ShellCylinder_LD,ShellCylinder_LE,StickCylinder_LD,StickCylinder_LE,SwingDrive_LD,SwingDrive_LE,SwingGear_1,SwingGear_2)
set.seed(1)
DfRnn <- BDadosRNN[, c(5,2)] %>% filter(BDadosRNN$Parametro == "Temperature" & BDadosRNN$TagComp == "BoomCylinder_LD")
DfRnn$Hora <- hms::as_hms(DfRnn$Hora)
ggplot(DfRnn, aes(x = Hora, y = Value)) +
geom_line() +
labs(title = "Gráfico de Dispersão com Horas",
x = "Hora",
y = "Valor") +
theme_minimal()
#preparação dos dados
periodos_anteriores <- 3# Cada valor da serie temporal e uma função dos periodos anteriores.
n_col = ncol(DfRnn)
for (i in 1:periodos_anteriores) {
for (j in 1:nrow(DfRnn))
if (j - periodos_anteriores <= 0){
} else {
DfRnn [j, n_col + i] = DfRnn [j -i, 2]
}
}
DfRnn <- DfRnn[, 2:5]
DfRnn <- DfRnn[4:8003,]
names(DfRnn) <- c("y", "x_1", "x_2", "x_3")
set.seed(1)
#Normalizando o Df
normalize <- function(x)
{
return((x - min(x))/ (max(x) - min(x)))
}
#MinMax Normalization
min <- min(DfRnn$y)
max <- max(DfRnn$y)
min <- min(DfRnn$x_1)
max <- max(DfRnn$x_1)
min <- min(DfRnn$x_2)
max <- max(DfRnn$x_2)
min <- min(DfRnn$x_3)
max <- max(DfRnn$x_3)
DFRnnNorm <-data.frame("Y" = (normalize(DfRnn$y)),"X_1" = (normalize(DfRnn$x_1)),"X_2"=(normalize(DfRnn$x_2)),"X_3"=(normalize(DfRnn$x_3)))
#DataFrame de Treino e teste
Y_array <- array(DFRnnNorm$Y, dim = c(nrow(DFRnnNorm) - 500, 1))
X_array <- array(c(DFRnnNorm$X_1[1:(nrow(DFRnnNorm)-500)],
DFRnnNorm$X_2[1:(nrow(DFRnnNorm)-500)],
DFRnnNorm$X_3[1:(nrow(DFRnnNorm)-500)]),
dim = c(nrow(DFRnnNorm) - 500, 1, 3))
install.packages("remotes")
remotes::install_github("rstudio/tensorflow")
library(tensorflow)
update.packages(ask = FALSE, checkBuilt = TRUE)
set.seed(1)
install.packages("remotes")
remotes::install_github("rstudio/tensorflow")
library(tensorflow)
install.packages("remotes")
dados <- matrix(runif(100), ncol = 1)
target <- sin(1:length(dados) / 10) + rnorm(length(dados), sd = 0.1)
# Converta os dados para o formato apropriado
dados <- array(dados, dim = c(length(dados), 1, 1))
target <- array(target, dim = c(length(target), 1))
# Crie um modelo LSTM simples
modelo <- keras_model_sequential() %>%
layer_lstm(units = 50, input_shape = c(1, 1)) %>%
layer_dense(units = 1)
library(keras)
# generate dummy data
x_train <- matrix(runif(1000*20), nrow = 1000, ncol = 20)
y_train <- runif(1000, min = 0, max = 9) %>%
round() %>%
matrix(nrow = 1000, ncol = 1) %>%
to_categorical(num_classes = 10)
x_test  <- matrix(runif(100*20), nrow = 100, ncol = 20)
y_test <- runif(100, min = 0, max = 9) %>%
round() %>%
matrix(nrow = 100, ncol = 1) %>%
to_categorical(num_classes = 10)
# create model
model <- keras_model_sequential()
# define and compile the model
model %>%
layer_dense(units = 64, activation = 'relu', input_shape = c(20)) %>%
layer_dropout(rate = 0.5) %>%
layer_dense(units = 64, activation = 'relu') %>%
layer_dropout(rate = 0.5) %>%
layer_dense(units = 10, activation = 'softmax') %>%
compile(
loss = 'categorical_crossentropy',
optimizer = optimizer_sgd(lr = 0.01, decay = 1e-6, momentum = 0.9, nesterov = TRUE),
metrics = c('accuracy')
)
# train
model %>% fit(x_train, y_train, epochs = 20, batch_size = 128)
# evaluate
score <- model %>% evaluate(x_test, y_test, batch_size = 128)
# create model
model <- keras_model_sequential()
# Libraries required
library(keras)
#imdb data
imdb <- dataset_imdb(num_words = 500)
c(c(train_x, train_y), c(test_x, test_y)) %<-% imdb
length(train_x); length(test_x)
table(train_y)
table(test_y)
#imdb data
imdb <- dataset_imdb(num_words = 500)
# Libraries required
library(keras)
#imdb data
imdb <- dataset_imdb(num_words = 500)
# Libraries required
install.packages(c("keras", "tensorflow"))
install.packages(c("keras", "tensorflow"))
library(keras)
#imdb data
imdb <- dataset_imdb(num_words = 500)
if (!requireNamespace("keras", quietly = TRUE)) {
install.packages("keras")
}
library(keras)
#imdb data
imdb <- dataset_imdb(num_words = 500)
# Libraries required
install.packages("remotes")
remotes::install_github("rstudio/tensorflow")
if (!requireNamespace("keras", quietly = TRUE)) {
install.packages("keras")
}
library(keras)
#imdb data
imdb <- dataset_imdb(num_words = 500)
tensorflow::install_tensorflow()
install.packages("remotes")
remotes::install_github("rstudio/tensorflow")
tensorflow::install_tensorflow()
install.packages("remotes")
install.packages("tensorflow")
tensorflow::install_tensorflow()
devtools::install_github("rstudio/keras")
if (!requireNamespace("keras", quietly = TRUE)) {
install.packages("keras")
}
library(keras)
set.seed(1)
update.packages(ask = FALSE, checkBuilt = TRUE)
pacotes <- c("rattle","rnn","ggplot2","dplyr","tidyverse", "readxl", "knitr", "lubridate", "tidyr","reshape", "scales", "caret", "tools","tinytex","tensorflow")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
set.seed(1)
list.files()
arquivos <- list.files()
arquivos <- arquivos[grep(".xls", arquivos)]
for (j in arquivos){
assign(strsplit(j, split="\\.")[[1]][1], read_excel(j))
}
BoomCylinder_LD <- BoomCylinder_LD %>% mutate(TagComp = "BoomCylinder_LD") %>% rename(replace = c("Tag" = "Parametro"))
BoomCylinder_LE <- BoomCylinder_LE %>% mutate(TagComp = "BoomCylinder_LE") %>% rename(replace = c("Tag" = "Parametro"))
BucketCylinder_LE <- BucketCylinder_LE %>% mutate(TagComp = "BucketCylinder_LE") %>% rename(replace = c("Tag" = "Parametro"))
BucketCylinder_LD <- BucketCylinder_LD %>% mutate(TagComp = "BucketCylinder_LD") %>% rename(replace = c("Tag" = "Parametro"))
BucketCylinder_LE <- BucketCylinder_LE %>% mutate(TagComp = "BucketCylinder_LE") %>% rename(replace = c("Tag" = "Parametro"))
FinalDrive_LD <- FinalDrive_LD %>% mutate(TagComp = "FinalDrive_LD") %>% rename(replace = c("Tag" = "Parametro"))
FinalDrive_LE <- FinalDrive_LE %>% mutate(TagComp = "FinalDrive_LE") %>% rename(replace = c("Tag" = "Parametro"))
SwingDrive_LD <- SwingDrive_LD %>% mutate(TagComp = "SwingDrive_LD") %>% rename(replace = c("Tag" = "Parametro"))
SwingDrive_LE <- SwingDrive_LE %>% mutate(TagComp = "SwingDrive_LE") %>% rename(replace = c("Tag" = "Parametro"))
PumpDrive_1 <- PumpDrive_1 %>% mutate(TagComp = "PumpDrive_1") %>% rename(replace = c("Tag" = "Parametro"))
PumpDrive_2 <- PumpDrive_2 %>% mutate(TagComp = "PumpDrive_2") %>% rename(replace = c("Tag" = "Parametro"))
ShellCylinder_LD <- ShellCylinder_LD %>% mutate(TagComp = "ShellCylinder_LD") %>% rename(replace = c("Tag" = "Parametro"))
ShellCylinder_LE <- ShellCylinder_LE %>% mutate(TagComp = "ShellCylinder_LE") %>% rename(replace = c("Tag" = "Parametro"))
StickCylinder_LD <- StickCylinder_LD %>% mutate(TagComp = "StickCylinder_LD") %>% rename(replace = c("Tag" = "Parametro"))
StickCylinder_LE <- StickCylinder_LE %>% mutate(TagComp = "StickCylinder_LE") %>% rename(replace = c("Tag" = "Parametro"))
SwingGear_1 <- SwingGear_1 %>% mutate(TagComp = "SwingGear_1") %>% rename(replace = c("Tag" = "Parametro"))
SwingGear_2 <- SwingGear_2 %>% mutate(TagComp = "SwingGear_2") %>% rename(replace = c("Tag" = "Parametro"))
BDadosRNN <- bind_rows(BoomCylinder_LD,BoomCylinder_LE,BucketCylinder_LD,BucketCylinder_LE,FinalDrive_LD,FinalDrive_LE,PumpDrive_1,PumpDrive_2,ShellCylinder_LD,ShellCylinder_LE,StickCylinder_LD,StickCylinder_LE,SwingDrive_LD,SwingDrive_LE,SwingGear_1,SwingGear_2)
BDadosRNN <- BDadosRNN %>%  mutate(Timestamp = dmy_hms(Timestamp), Data = as.Date(Timestamp), Hora = format(Timestamp, "%H:%M:%S"))
BDadosRNN <- BDadosRNN %>% select(-Timestamp)
rm(BoomCylinder_LD,BoomCylinder_LE,BucketCylinder_LD,BucketCylinder_LE,FinalDrive_LD,FinalDrive_LE,PumpDrive_1,PumpDrive_2,ShellCylinder_LD,ShellCylinder_LE,StickCylinder_LD,StickCylinder_LE,SwingDrive_LD,SwingDrive_LE,SwingGear_1,SwingGear_2)
set.seed(1)
DfRnn <- BDadosRNN[, c(5,2)] %>% filter(BDadosRNN$Parametro == "Temperature" & BDadosRNN$TagComp == "BoomCylinder_LD")
DfRnn$Hora <- hms::as_hms(DfRnn$Hora)
ggplot(DfRnn, aes(x = Hora, y = Value)) +
geom_line() +
labs(title = "Gráfico de Dispersão com Horas",
x = "Hora",
y = "Valor") +
theme_minimal()
#preparação dos dados
periodos_anteriores <- 3# Cada valor da serie temporal e uma função dos periodos anteriores.
n_col = ncol(DfRnn)
for (i in 1:periodos_anteriores) {
for (j in 1:nrow(DfRnn))
if (j - periodos_anteriores <= 0){
} else {
DfRnn [j, n_col + i] = DfRnn [j -i, 2]
}
}
DfRnn <- DfRnn[, 2:5]
DfRnn <- DfRnn[4:8003,]
names(DfRnn) <- c("y", "x_1", "x_2", "x_3")
DfRnnTimeStamp <-DfRnn$Hora <- hms::as_hms(DfRnn$Hora)
DfRnnTimeStamp <-DfRnn$Value <- as.numeric(DfRnn$Value)
set.seed(1)
DfRnn <- BDadosRNN[, c(5,2)] %>% filter(BDadosRNN$Parametro == "Temperature" & BDadosRNN$TagComp == "BoomCylinder_LD")
DfRnn$Hora <- hms::as_hms(DfRnn$Hora)
DfRnnTimeStamp <-DfRnn$Hora <- hms::as_hms(DfRnn$Hora)
DfRnnTimeStamp <-DfRnn$Value <- as.numeric(DfRnn$Value)
write.csv2(DfRnn, file = 'dados.csv', row.names = FALSE)
ggplot(DfRnn, aes(x = Hora, y = Value)) +
geom_line() +
labs(title = "Gráfico de Dispersão com Horas",
x = "Hora",
y = "Valor") +
theme_minimal()
#preparação dos dados
periodos_anteriores <- 3# Cada valor da serie temporal e uma função dos periodos anteriores.
n_col = ncol(DfRnn)
for (i in 1:periodos_anteriores) {
for (j in 1:nrow(DfRnn))
if (j - periodos_anteriores <= 0){
} else {
DfRnn [j, n_col + i] = DfRnn [j -i, 2]
}
}
DfRnn <- DfRnn[, 2:5]
DfRnn <- DfRnn[4:8003,]
names(DfRnn) <- c("y", "x_1", "x_2", "x_3")
set.seed(1)
DfRnn <- BDadosRNN[, c(5,2)] %>% filter(BDadosRNN$Parametro == "Temperature" & BDadosRNN$TagComp == "BoomCylinder_LD")
set.seed(1)
DfRnn <- BDadosRNN[, c(5,2)] %>% filter(BDadosRNN$Parametro == "Temperature" & BDadosRNN$TagComp == "BoomCylinder_LD")
DfRnn$Hora <- hms::as_hms(DfRnn$Hora)
DfRnnTimeStamp <-DfRnn
write.csv2(DfRnn, file = 'dados.csv', row.names = FALSE)
ggplot(DfRnn, aes(x = Hora, y = Value)) +
geom_line() +
labs(title = "Gráfico de Dispersão com Horas",
x = "Hora",
y = "Valor") +
theme_minimal()
#preparação dos dados
periodos_anteriores <- 3# Cada valor da serie temporal e uma função dos periodos anteriores.
n_col = ncol(DfRnn)
for (i in 1:periodos_anteriores) {
for (j in 1:nrow(DfRnn))
if (j - periodos_anteriores <= 0){
} else {
DfRnn [j, n_col + i] = DfRnn [j -i, 2]
}
}
DfRnn <- DfRnn[, 2:5]
DfRnn <- DfRnn[4:8003,]
names(DfRnn) <- c("y", "x_1", "x_2", "x_3")
set.seed(1)
DfRnn <- BDadosRNN[, c(5,2)] %>% filter(BDadosRNN$Parametro == "Temperature" & BDadosRNN$TagComp == "BoomCylinder_LD")
DfRnn$Hora <- hms::as_hms(DfRnn$Hora)
DfRnnTimeStamp <-DfRnn
write.csv2(DfRnnTimeStamp, file = 'dados.csv', row.names = FALSE)
ggplot(DfRnn, aes(x = Hora, y = Value)) +
geom_line() +
labs(title = "Gráfico de Dispersão com Horas",
x = "Hora",
y = "Valor") +
theme_minimal()
#preparação dos dados
periodos_anteriores <- 3# Cada valor da serie temporal e uma função dos periodos anteriores.
n_col = ncol(DfRnn)
for (i in 1:periodos_anteriores) {
for (j in 1:nrow(DfRnn))
if (j - periodos_anteriores <= 0){
} else {
DfRnn [j, n_col + i] = DfRnn [j -i, 2]
}
}
DfRnn <- DfRnn[, 2:5]
DfRnn <- DfRnn[4:8003,]
names(DfRnn) <- c("y", "x_1", "x_2", "x_3")
DfRnnTimeStamp <- mutate(DfRnnTimeStamp$Hora, "timestamp")
colnames(DfRnnTimeStamp)[colnames(DfRnnTimeStamp) == "Hora"] <- "timestamp"
set.seed(1)
DfRnn <- BDadosRNN[, c(5,2)] %>% filter(BDadosRNN$Parametro == "Temperature" & BDadosRNN$TagComp == "BoomCylinder_LD")
DfRnn$Hora <- hms::as_hms(DfRnn$Hora)
DfRnnTimeStamp <-DfRnn
colnames(DfRnnTimeStamp)[colnames(DfRnnTimeStamp) == "Hora"] <- "timestamp"
write.csv2(DfRnnTimeStamp, file = 'dados.csv', row.names = FALSE)
ggplot(DfRnn, aes(x = Hora, y = Value)) +
geom_line() +
labs(title = "Gráfico de Dispersão com Horas",
x = "Hora",
y = "Valor") +
theme_minimal()
#preparação dos dados
periodos_anteriores <- 3# Cada valor da serie temporal e uma função dos periodos anteriores.
n_col = ncol(DfRnn)
for (i in 1:periodos_anteriores) {
for (j in 1:nrow(DfRnn))
if (j - periodos_anteriores <= 0){
} else {
DfRnn [j, n_col + i] = DfRnn [j -i, 2]
}
}
DfRnn <- DfRnn[, 2:5]
DfRnn <- DfRnn[4:8003,]
names(DfRnn) <- c("y", "x_1", "x_2", "x_3")
caminho_arquivo <- 'D:\RNN_Sensor Dynamox\Git Repositório\rnn-component-lIfe-cycle\dados.xlsx'
colnames(DfRnnTimeStamp)[colnames(DfRnnTimeStamp) == "Hora"] <- "timestamp"
caminho_arquivo <- 'D:/RNN_Sensor Dynamox/Git Repositório/rnn-component-lIfe-cycle/dados.xlsx'
caminho_arquivo <- 'D:/RNN_Sensor Dynamox/Git Repositório/rnn-component-lIfe-cycle/dados.xlsx'
openxlsx::write.xlsx(DfRnnTimeStamp, caminho_arquivo, rowNames = FALSE)
install.packages("tensorflow")
library(tensorflow)
install_tensorflow()
